name: Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  BUILD_TYPE: Release
  LLVM_VERSION: 15

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Cache APT Packages
      uses: actions/cache@v3
      id: apt-cache
      with:
        path: |
          /var/cache/apt/archives
          /var/lib/apt/lists
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/build.yml') }}

    - name: Cache LLVM and Clang
      id: cache-llvm
      uses: actions/cache@v3
      with:
        path: |
          /usr/lib/llvm-${{ env.LLVM_VERSION }}
          /usr/include/llvm-${{ env.LLVM_VERSION }}
          /usr/bin/llvm-*-${{ env.LLVM_VERSION }}
          /usr/bin/clang*-${{ env.LLVM_VERSION }}
          /usr/lib/x86_64-linux-gnu/libc++*
          /usr/include/c++/v1
        key: ${{ runner.os }}-llvm-${{ env.LLVM_VERSION }}

    - name: Install LLVM and Clang
      if: steps.cache-llvm.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-${{ env.LLVM_VERSION }} libc++-${{ env.LLVM_VERSION }}-dev libc++abi-${{ env.LLVM_VERSION }}-dev

    - name: Cache Build Directory
      uses: actions/cache@v3
      with:
        path: ${{github.workspace}}/build
        key: ${{ runner.os }}-build-${{ hashFiles('CMakeLists.txt', 'src/**', 'tests/**') }}
        restore-keys: |
          ${{ runner.os }}-build-

    - name: Install Dependencies
      run: |
        sudo apt-get install -y cmake build-essential
        sudo apt-get install -y libxxhash-dev
        sudo apt install -y -V ca-certificates lsb-release wget
        wget https://apache.jfrog.io/artifactory/arrow/$(lsb_release --id --short | tr 'A-Z' 'a-z')/apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
        sudo apt install -y -V ./apache-arrow-apt-source-latest-$(lsb_release --codename --short).deb
        sudo apt update
        sudo apt install -y -V libarrow-dev # For C++
        sudo apt install -y -V libparquet-dev # For C++

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_CXX_COMPILER=clang++-${{ env.LLVM_VERSION }} -DCMAKE_CXX_FLAGS="-stdlib=libc++"

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}} -j$(nproc)

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ./unit_tests