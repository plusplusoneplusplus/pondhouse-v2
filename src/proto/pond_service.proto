syntax = "proto3";

package pond.proto;

// Service definition for the Pond database
service PondService {
  // Create a new KV table
  rpc CreateKVTable(CreateKVTableRequest) returns (CreateKVTableResponse) {}
  
  // List KV tables (tables suitable for KV operations)
  rpc ListKVTables(ListKVTablesRequest) returns (ListKVTablesResponse) {}

  // Get a value by key
  rpc Get(GetRequest) returns (GetResponse) {}
  
  // Put a key-value pair
  rpc Put(PutRequest) returns (PutResponse) {}
  
  // Delete a key
  rpc Delete(DeleteRequest) returns (DeleteResponse) {}
  
  // Scan a range of keys
  rpc Scan(ScanRequest) returns (stream ScanResponse) {}

  // List files and directories with detailed information
  rpc ListDetailedFiles(ListDetailedFilesRequest) returns (ListDetailedFilesResponse) {}
  
  // Get directory information
  rpc GetDirectoryInfo(DirectoryInfoRequest) returns (DirectoryInfoResponse) {}
  
  // Execute SQL query (primarily for table creation)
  rpc ExecuteSQL(ExecuteSQLRequest) returns (ExecuteSQLResponse) {}
  
  // List all tables in the catalog
  rpc ListTables(ListTablesRequest) returns (ListTablesResponse) {}
  
  // Get table metadata
  rpc GetTableMetadata(GetTableMetadataRequest) returns (GetTableMetadataResponse) {}
  
  // New method for ingesting data from JSON
  rpc IngestJsonData(IngestJsonDataRequest) returns (IngestJsonDataResponse) {}

  // Read content from a parquet file
  rpc ReadParquetFile(ReadParquetFileRequest) returns (stream ReadParquetFileResponse) {}

  // Update partition specification for a table
  rpc UpdatePartitionSpec(UpdatePartitionSpecRequest) returns (UpdatePartitionSpecResponse) {}
}

// Request message for Get operation
message GetRequest {
  bytes key = 1;
  string table_name = 2;
}

// Response message for Get operation
message GetResponse {
  bool found = 1;
  bytes value = 2;
  string error = 3;
}

// Request message for Put operation
message PutRequest {
  bytes key = 1;
  bytes value = 2;
  string table_name = 3;
}

// Response message for Put operation
message PutResponse {
  bool success = 1;
  string error = 2;
}

// Request message for Delete operation
message DeleteRequest {
  bytes key = 1;
  string table_name = 2;
}

// Response message for Delete operation
message DeleteResponse {
  bool success = 1;
  string error = 2;
}

// Request message for Scan operation
message ScanRequest {
  bytes start_key = 1;
  bytes end_key = 2;
  int32 limit = 3;
  string table_name = 4;
}

// Response message for Scan operation
message ScanResponse {
  bytes key = 1;
  bytes value = 2;
  bool has_more = 3;
  string error = 4;
}

// Request message for ListDetailedFiles operation
message ListDetailedFilesRequest {
  string path = 1;
  bool recursive = 2;
}

// File system entry with path and type information
message FileSystemEntry {
  string path = 1;
  bool is_directory = 2;
}

// Response message for ListDetailedFiles operation
message ListDetailedFilesResponse {
  repeated FileSystemEntry entries = 1;
  bool success = 2;
  string error = 3;
}

// Request message for GetDirectoryInfo operation
message DirectoryInfoRequest {
  string path = 1;
}

// Response message for GetDirectoryInfo operation
message DirectoryInfoResponse {
  bool exists = 1;
  bool is_directory = 2;
  uint64 num_files = 3;
  uint64 total_size = 4;
  bool success = 5;
  string error = 6;
}

// Column information for table schema
message ColumnInfo {
  string name = 1;
  string type = 2;
}

// Partition value for a data file
message PartitionValue {
  string key = 1; 
  string value = 2;
}

// Data file information
message DataFileInfo {
  string path = 1;
  int64 content_length = 2;
  map<string, string> partition_values = 3;
  int64 record_count = 4;
}

// Table metadata information
message TableMetadataInfo {
  string name = 1;
  string location = 2;
  repeated ColumnInfo columns = 3;
  repeated string partition_columns = 4;
  map<string, string> properties = 5;
  int64 last_updated_time = 6;
  repeated DataFileInfo data_files = 7;
  PartitionSpec partition_spec = 8;  // Add partition spec to metadata
}

// Request message for ExecuteSQL operation
message ExecuteSQLRequest {
  string sql_query = 1;
}

// Response message for ExecuteSQL operation
message ExecuteSQLResponse {
  bool success = 1;
  string error = 2;
  string message = 3;
}

// Request message for ListTables operation
message ListTablesRequest {
}

// Response message for ListTables operation
message ListTablesResponse {
  repeated string table_names = 1;
  bool success = 2;
  string error = 3;
}

// Request message for GetTableMetadata operation
message GetTableMetadataRequest {
  string table_name = 1;
}

// Response message for GetTableMetadata operation
message GetTableMetadataResponse {
  TableMetadataInfo metadata = 1;
  bool success = 2;
  string error = 3;
}

// New message definitions for JSON data ingestion
message IngestJsonDataRequest {
  // The name of the table to ingest data into
  string table_name = 1;
  
  // JSON data as a string. Should be an array of objects where each object represents a row
  // and keys match column names in the table's schema
  string json_data = 2;
}

message IngestJsonDataResponse {
  // Number of rows successfully ingested
  int64 rows_ingested = 1;
  
  // Any error message if the operation failed
  string error_message = 2;
  
  // Whether the operation was successful
  bool success = 3;
}

// Message for CreateKVTable request
message CreateKVTableRequest {
  string table_name = 1;
}

// Message for CreateKVTable response
message CreateKVTableResponse {
  bool success = 1;
  string error = 2;
}

// Message for ListKVTables request
message ListKVTablesRequest {
  // Currently empty, may add filters in the future
}

// Message for ListKVTables response
message ListKVTablesResponse {
  bool success = 1;
  repeated string table_names = 2;
  string error = 3;
}

// Message for ReadParquetFile request
message ReadParquetFileRequest {
  string file_path = 1;  // Path to the parquet file
  int32 batch_size = 2;  // Number of rows to read in each batch
  repeated string columns = 3;  // Optional: specific columns to read. If empty, read all columns
  int64 start_row = 4;  // Optional: start reading from this row number
  int64 num_rows = 5;   // Optional: maximum number of rows to read
}

// Message for ReadParquetFile response
message ReadParquetFileResponse {
  bool success = 1;
  string error = 2;
  repeated ColumnData columns = 3;  // Column data for this batch
  bool has_more = 4;  // Whether there are more rows to read
  int64 total_rows = 5;  // Total number of rows in the file
}

// Column data with type information
message ColumnData {
  string name = 1;
  string type = 2;
  repeated string values = 3;  // String representation of values
  repeated bool nulls = 4;     // Whether each value is null
}

// Partition field definition
message PartitionField {
  int32 source_id = 1;
  int32 field_id = 2;
  string name = 3;
  string transform = 4;
  string transform_param = 5;
}

// Partition specification
message PartitionSpec {
  repeated PartitionField fields = 1;
}

// Request message for UpdatePartitionSpec operation
message UpdatePartitionSpecRequest {
  string table_name = 1;
  PartitionSpec partition_spec = 2;
}

// Response message for UpdatePartitionSpec operation
message UpdatePartitionSpecResponse {
  bool success = 1;
  string error = 2;
} 